---
import { getLocale } from "@/paraglide/runtime";
const locale = getLocale();
---

<div
  data-identifier="section_about-me_tags"
  class="container xl:max-w-7xl mt-12 mt-16"
>
  <div class="w-full max-w-5xl mx-auto">
    <h2
      class="text-3xl font-display font-bold uppercase tracking-wider text-[#ffb586]"
    >
      Toolset
    </h2>
  </div>
  <div
    id="container"
    class="w-full max-w-5xl mx-auto fle flex-row justify-center items-start"
    data-locale={locale}
  >
  </div>
</div>

<script>
  import { returnOrThrow } from "@/utils/guards";
  import { content } from "./tags.content";
  import type { Locale } from "@/paraglide/runtime";
  const container = returnOrThrow(
    document.querySelector(
      `[data-identifier="section_about-me_tags"] #container`
    ) as HTMLElement
  );
  const locale = returnOrThrow(
    container.dataset.locale as Locale,
    "Locale not found in container dataset"
  );
  const tools: Array<
    Array<{
      label: string;
      elementRef: HTMLElement | null;
    }>
  > = content[locale].tags.map((tagsLine) =>
    tagsLine.map((tag) => ({
      label: tag,
      elementRef: null,
    }))
  );

  let fontSize = 1.3;
  let borderBottomWidth = 3;
  tools.forEach((toolsLine) => {
    const div = document.createElement("div");
    div.classList.add("tools-line");
    div.style.fontSize = `${fontSize}rem`;
    div.style.setProperty("--border-bottom-width", `${borderBottomWidth}px`);
    toolsLine.forEach((tool) => {
      const span = document.createElement("span");
      span.classList.add("tool");
      span.innerHTML = tool.label;
      tool.elementRef = span;
      div.appendChild(span);
    });
    container.appendChild(div);
    fontSize -= 0.2;
    borderBottomWidth = borderBottomWidth > 1 ? borderBottomWidth - 1 : 1;
  });

  tools.forEach((toolsLine, i) => {
    let dividend = 1.5;
    toolsLine.forEach((tool) => {
      if (!tool.elementRef) return;
      let substractionAmount = dividend / 1.5;
      tool.elementRef.style.setProperty(
        "--transitionDelay",
        `${(1 - substractionAmount) * 4 + 0.5 * i}s`
      );
      dividend = substractionAmount;
    });
  });

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("visible");
          observer.disconnect();
        }
      });
    },
    {
      threshold: 0.2,
      rootMargin: "0px 0px -30% 0px",
    }
  );

  observer.observe(container);
</script>

<style>
  #container :global(.tools-line) {
    @apply flex-wrap flex -ml-4 justify-center;
    @apply lg:justify-start;
  }

  #container :global(.tool) {
    position: relative;
    display: inline-block;
    padding: 0.5rem;
    margin: 0.5rem;
    border-radius: 0.5rem;
    border-bottom: var(--border-bottom-width, 2px) solid transparent;
    transition: border-bottom 1s ease-out;
    transition-delay: var(--transitionDelay);
  }

  #container.visible :global(.tool) {
    border-bottom: var(--border-bottom-width, 2px) solid #ff9c5d;
  }

  #container :global(.tool::after) {
    content: "";
    display: block;
    position: absolute;
    left: 50%;
    top: 50%;
    height: 110%;
    width: 110%;
    background-color: var(--body-bg);
    transition: transform 2s ease-out;
    transition-delay: var(--transitionDelay);
    border-radius: 100%;
    transform: translateX(-50%) translateY(-50%);
  }

  #container.visible :global(.tool::after) {
    transform: translateX(100%) translateY(-50%);
  }
</style>
